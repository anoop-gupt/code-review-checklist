{"version":3,"sources":["pie-chart.js","meter-chart.js","App.js","serviceWorker.js","index.js"],"names":["pieChart","items","_data","i","length","push","title","weight","google","window","charts","load","setOnLoadCallback","data","visualization","arrayToDataTable","PieChart","document","getElementById","draw","is3D","legend","meterChart","selectedWeights","options","width","height","redFrom","redTo","yellowFrom","yellowTo","greenFrom","greenTo","minorTicks","chart","Gauge","setInterval","setValue","finalWeight","selectedOptions","renderParentList","map","cat","index","className","key","id","linkId","hasChilds","row","type","value","htmlFor","subCat","renderChildList","App","href","checkList","role","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6d41425.chunk.js","sourcesContent":["const pieChart = (items) => {\n    let _data = [\n      ['Districution Weight', 'Per Category']\n    ]\n\n    for(let i=0;  i < items.length; i++) {\n        _data.push([items[i].title, items[i].weight])\n    }\n\n    const google = window.google; \n    google.charts.load('current', {'packages':['corechart']});\n    google.charts.setOnLoadCallback(drawChart);\n  \n    function drawChart() {\n  \n      var data = google.visualization.arrayToDataTable(_data);\n  \n      var options = {\n        title: 'Distribution Weight',\n        is3D: true,\n        legend: 'right'\n      };\n  \n      var chart = new google.visualization.PieChart(document.getElementById('piechart'));\n  \n      chart.draw(data, options);\n    }\n}\nexport default pieChart\n","const meterChart = (selectedWeights) => {\n    const google = window.google\n    google.charts.load('current', {'packages':['gauge']});\n    google.charts.setOnLoadCallback(drawChart);\n\n    let _data = [\n      ['Label', 'Value'],\n      ['Meter', 0]\n    ]\n    const finalWeight = 0\n  \n    function drawChart() {\n  \n      var data = google.visualization.arrayToDataTable(_data);\n  \n      var options = {\n          width: 200, height: 200,\n          redFrom: 0, redTo: 25,\n          yellowFrom:26, yellowTo: 75,\n          greenFrom:76, greenTo: 100,\n          minorTicks: 5\n      };\n  \n      var chart = new google.visualization.Gauge(document.getElementById('chart_div'));\n  \n      chart.draw(data, options);\n  \n      setInterval(function() {\n        data.setValue(0, 1, finalWeight);\n        chart.draw(data, options);\n      }, 1000);\n    }\n}\nexport default meterChart","import React, {Fragment} from \"react\";\nimport \"./App.scss\";\nimport checkList from \"./data.json\";\nimport pieChart from './pie-chart'\nimport meterChart from './meter-chart'\nconst selectedOptions = []\n\nfunction renderChildList(data) {\n    return (<Fragment>\n      {data.map((subCat, index) => (<div className='sub-list' key={subCat.title + index}>\n        <h4 className=\"breadcrumb\">{subCat.title}</h4>\n          {subCat.items.map((row, index) => (\n          <div className=\"form-check\" key={row.title + index}>\n            <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              value=\"\"\n              id=\"defaultCheck1\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"defaultCheck1\">\n              {row.title}\n            </label>\n          </div>\n          ))}\n        </div>))}\n    </Fragment>)\n}\n\nfunction renderParentList(data) {\n    return (<Fragment>\n        {data.length && data.map((cat, index) => (\n          <div className='list' key={cat.title + index} id={cat.linkId}>\n            <h4 className=\"breadcrumb\">{cat.title}</h4>\n            {!cat.hasChilds && cat.items.map((row, index) => (\n              <div className=\"form-check\" key={row + index}>\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  value=\"\"\n                  id=\"defaultCheck1\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"defaultCheck1\">\n                  {row.title}\n                </label>\n              </div>\n            ))}\n            {cat.hasChilds && renderChildList(cat.items)}\n          </div>\n        ))}\n    </Fragment>)\n}\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      {/** Header */}\n      <nav className=\"navbar navbar-dark bg-dark flex-md-nowrap p-0\">\n        <a className=\"navbar-brand col-sm-3 col-md-3 mr-0\" href=\"/\">Frontend Code Review Checklist</a>\n      </nav>\n\n      <div className=\"container-fluid\">\n      <div className=\"row\">\n        {/** Sidebar menu */}\n        <nav className=\"col-md-2 col-lg-2 d-none d-md-block bg-light sidebar\">\n          <div className=\"sidebar-sticky\">\n            <ul className=\"nav flex-column mb-2\">\n              {checkList.map((row, index) => (\n                <li className=\"nav-item\" key={row.linkId + index} >\n                  <a className=\"nav-link\" href={`#${row.linkId}`}>\n                    {row.title}\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </nav>\n\n        {/** Main content area */}\n        <main role=\"main\" className=\"col-md-6 ml-sm-auto col-lg-6 pt-3 px-4\">\n          <div className=\"content\">{renderParentList(checkList)}</div>\n        </main>\n\n        {/** Chart area */}\n        <div className=\"sidebar col-md-4 col-lg-4\">\n          <div className=\"sidebar-sticky\">\n            <div id=\"piechart\">{pieChart(checkList)}</div>\n            <div id=\"chart_div\">{meterChart(selectedOptions)}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}